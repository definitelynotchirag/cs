ASSIGNMENT 12

PROIRITY QUEUE


#include <iostream>
#include <bits/stdc++.h>
using namespace std;

#define ll long long

template <class T>
class item
{
public:
    T data;
    T priority;

    item(T d = 0, T p = 0)
    {
        data = d;
        priority = p;
    }

    bool operator<(item it)
    {
        if (priority < it.priority)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
};

template <class A>
class queuen
{
public:
    item<A> que[20];
    int max;
    int front;
    int rear;

    queuen()
    {
        max = 20;
        front = -1;
        rear = -1;
    }

    void qInsert(item<A> val)
    {
        if (rear == max - 1)
        {
            cout << "overflow" << endl;
        }
        else if (front == -1)
        {
            rear = front = 0;
            que[rear] = val;
        }
        else
        {
            rear += 1;
            que[rear] = val;

            int j = rear - 1;
            while ((que[j] < val) && (j >= front))
            {
                que[j + 1] = que[j];
                j--;
            }
            que[j + 1] = val;
        }
    }

    item<A> delque()
    {
        item<A> temp = que[front];

        if (front == -1)
        {
            cout << "underflow" << endl;
        }
        else if (front == rear)
        {
            front = -1;
            rear = -1;
        }
        else
        {
            front += 1;
        }

        return temp;
    }

    void display()
    {
        if (front != -1)
        {
            for (int i = front; i <= rear; i++)
            {
                cout << que[i].data << " ";
            }
        }
    }
};

int main()
{
    queuen<int> q;
    int id, p, op;
    item<int> b;

    while (true)
    {
        cout << "\nEnter 1 to insert element into queue, 2 to take an element out, 3 to display and 0 to exit" << endl;
        cin >> op;
        if (op == 0)
        {
            cout << "\nThankyou" << endl;
            break;
        }
        else if (op == 1)
        {
            cout << "Enter value ID to be inserted: ";
            cin >> id;
            cout << "Enter value priority to be inserted: ";
            cin >> p;
            q.qInsert(item<int>(id, p));
        }
        else if (op == 2)
        {
            b = q.delque();
            if ((b.priority == 0) && (b.data == 0))
            {
                cout << "\nUnderflow" << endl;
            }
            else
            {
                cout << "\nID: " << b.data << endl;
            }
        }
        else if (op == 3)
        {
            cout << "\nQueue: " << endl;
            q.display();
            cout << endl;
        }
        else
        {
            cout << "Invalid Input" << endl;
            continue;
  }
}
}